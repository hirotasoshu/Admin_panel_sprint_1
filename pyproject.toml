[tool.poetry]
name = "admin_panel_sprint_1"
version = "0.1.0"
description = ""
authors = ["Maksim Zayakin <rasetsu@list.ru>"]

[tool.poetry.dependencies]
python = "^3.9"
psycopg2-binary = "^2.9.1"
python-dotenv = "^0.19.1"
Django = "^3.2.8"
gunicorn = "^20.1.0"

[tool.poetry.dev-dependencies]
black = "^21.9b0"
taskipy = "^1.8.2"
isort = "^5.9.3"
flake8 = "^3.9.2"
pre-commit = "^2.15.0"
mypy = "^0.910"
django-debug-toolbar = "^3.2.2"
django-stubs = "^1.9.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py39']
exclude = '''
/(
	\.git
| \.hg
| \.mypy_cache
| \.tox
| \.venv
| _build
| buck-out
| build
| schema_design
)/
'''

[tool.isort]
profile = "black"

[tool.mypy]
python_version = "3.9"
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true
strict_equality = true
implicit_reexport = false
show_error_context = true
pretty = true
show_traceback = true
scripts_are_modules = true
ignore_missing_imports = true
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "config.settings.dev"

[tool.pyright]
executionEnvironments = [{root = "sqlite_to_postgres"}]

[tool.taskipy.tasks]
lint-and-format = "pre-commit run --all-files --show-diff-on-failure"
run-pg = 'docker run -d --rm --name postgres -p 5432:5432 -v movies_db:/var/lib/postgresql/data --mount type=bind,source="$(pwd)"/schema_design/db_schema.sql,target=/db_schema.sql --env-file ./.env postgres:13'
open-pg-shell = "docker exec -it postgres bash -c 'psql -U ${POSTGRES_USER}'"
create-db = "docker exec -it postgres bash -c 'psql -U ${POSTGRES_USER} -f db_schema.sql'"
sqlite-to-postgres = "cd sqlite_to_postgres && python load_data.py"
fake-migrate = "./movies_admin/manage.py migrate --fake movies"
migrate = "./movies_admin/manage.py migrate"
createsuperuser = "./movies_admin/manage.py createsuperuser"
runserver = "./movies_admin/manage.py runserver"
